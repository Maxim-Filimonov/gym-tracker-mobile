import configureMockStore from 'redux-mock-store';
import thunk from 'redux-thunk';
import fetchMock from 'fetch-mock';
import { API_URL } from '../../config';
import * as actions from '../../actions';
import * as types from '../../actions/types';
import * as socialLogin from '../../actions/socialLogin';

jest.mock('../../actions', () => {
  return { fetchJWT: jest.fn() };
});

const middleware = [thunk];
const mockStore = configureMockStore(middleware);

describe('async actions', () => {
  beforeEach(() => {
    actions.fetchJWT.mockClear();
  });

  afterEach(() => {
    fetchMock.reset();
    fetchMock.restore();
  });

  describe('loginWithGoogle', () => {
    it('creates a LOGIN_GOOGLE_SUCCESS when logging in a user with Google', () => {
      const mockUser = {
        socialUserId: 'test',
        image: 'image.jpg',
        email: 'test@test.com',
        name: 'test',
        socialAppTokens: { type: 'Google' },
      };

      /* processGoogleLogin = jest.fn().mockImplementation(() =>
        Promise.resolve({
          user: { ...mockUser },
        })); */

      socialLogin.processGoogleLogin = jest.fn(() => Promise.resolve({ ...mockUser }));

      const expectedActions = [
        { type: types.LOGIN_GOOGLE_REQUEST },
        { type: types.LOGIN_GOOGLE_SUCCESS, user: { ...mockUser } },
      ];

      const store = mockStore({ });

      return store.dispatch(actions.loginWithGoogle()).then(() => {
        // return of async actions
        expect(store.getActions()).toEqual(expectedActions);
      });
    });
  });
});
